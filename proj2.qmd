```{r echo=FALSE}
suppressPackageStartupMessages({
library(factoextra)
library(tidyverse)
library(GGally)
library(caret)
library(lctools)
library(sqldf)
library(latex2exp)
library(tidymodels)
library(patchwork)
library(tree)
library(glmnet)
library(MASS)
library(xgboost)
})

# importing CV master function 
# source("CVmaster.R")
```

# 1)

## a) on overleaf

half page summary of paper

## b) summary of data

```{r cache=TRUE}
# loading data 
img1 = data.frame(read.table("image_data/imagem1.txt"))
img2 = data.frame(read.table("image_data/imagem2.txt"))
img3 = data.frame(read.table("image_data/imagem3.txt"))

# name the columns  
col_names = c("y", "x", "label", "NDAI", "SD", "CORR", "DF","CF","BF","AF","AN")
colnames(img1) = col_names
colnames(img2) = col_names
colnames(img3) = col_names

# add source column to split into other sets 
img1$source = "img1"
img2$source = "img2"
img3$source = "img3"

# manipulation to make plotting easier 
lab_combined = rbind(img1[,c("x", "y", "label","source")],
                     img2[,c("x", "y", "label","source")],
                     img3[,c("x", "y", "label","source")])

# change to factors to color when plotting 
lab_combined$label = as.factor(lab_combined$label)

# combining everything for later 
img_combined = rbind(img1,img2,img3)
```

Geographic plot and bar plot of labels

```{r}
ggplot(lab_combined, aes(x=x,y=y)) + 
  geom_point(aes(colour = label)) + 
  facet_grid(cols = vars(source)) + 
  labs(title = "Images With Expert Labels",
       subtitle = "-1: No Cloud | 0 : Uncertain | 1 : Cloud") + 
  scale_colour_brewer("Expert \nLabel")

lab_combined2 = lab_combined %>%
  group_by(source, label) %>%
  count(label) %>%
  ungroup(label) %>%
  mutate(prop = n / sum(n))

ggplot(lab_combined2, aes(label,fill=label)) + 
  geom_col(aes(y = prop), col = "darkgrey") + 
  facet_grid(cols = vars(source)) + 
  labs(title = "Images With Expert Labels",
       subtitle = "-1: No Cloud | 0 : Uncertain | 1 : Cloud") + 
  ylab("Proportion of Pixels") + 
  scale_fill_brewer("Expert \nLabel")
```

## c) EDA

For some basic EDA, I took a random sample of the total data to allow for quicker plotting. This should retain the structure of the data, but may remove some outliers.

```{r}
set.seed(1124)
eda_sample = sample_n(img_combined,10000)
```

PCA

```{r }
rand.pca = prcomp(eda_sample[,4:11], center=TRUE, scale = TRUE)
fviz_pca_biplot(rand.pca, geom="point", habillage = eda_sample$label)
```

Plotting some pairs

```{r}

# https://www.blopig.com/blog/2019/06/a-brief-introduction-to-ggpairs/
ggpairs(eda_sample, 
        columns=4:11, # all columns 
        ggplot2::aes(color=as.factor(label),alpha=0.2),
        progress = FALSE,
        lower = list(continuous = wrap("smooth", alpha = 0.3, size=0.3)))
```

Investigating the features. Below we removed the 0 labels, though they can be added back in if necessary.

```{r}
# =============================================================================
# Summarizing features here 
# =============================================================================

# summarizing NDAI 
eda_sample %>%
  filter(label != 0) %>%
  group_by(label) %>%
  summarize(meanndai = mean(NDAI),
            minndai = min(NDAI),
            maxndai = max(NDAI))

# summarizing SD 
eda_sample %>%
  filter(label != 0) %>%
  group_by(label) %>%
  summarize(meanSD = mean(SD),
            minSD = min(SD),
            maxSD = max(SD))

# summarizing CORR 
eda_sample %>%
  filter(label != 0) %>%
  group_by(label) %>%
  summarize(meanCORR = mean(CORR),
            minCORR = min(CORR),
            maxCORR = max(CORR))

# =============================================================================
# making plots of the features 
# TODO: add labels below? 
# =============================================================================

# plotting SD 
sd_plot = eda_sample %>%
  filter(label == 1) %>%
  ggplot(aes(x = log(SD))) +
  geom_density(fill = "lightblue", alpha = 0.8) + 
  geom_density(data = eda_sample %>% filter(label == -1), 
                 fill = "magenta", alpha = 0.4)

#density of NDAI
ndai_plot = eda_sample %>%
  filter(label == 1) %>%
  ggplot(aes(x = NDAI)) +
  labs(y = "") +
  geom_density(fill = "lightblue", alpha = 0.8) + 
  geom_density(data = eda_sample %>% filter(label == -1), 
               fill = "magenta", alpha = 0.4)

#density plot of CORR
corr_plot = eda_sample %>%
  filter(label == 1) %>%
  ggplot(aes(x = CORR)) +
  labs(y = "") +
  geom_density(aes(fill = "Cloud"), alpha = 0.8) + 
  geom_density(data = eda_sample %>% filter(label == -1), 
               aes(fill = "No Cloud"), alpha = 0.4) + 
  scale_fill_manual(name = "Expert Label", 
                     breaks = c("Cloud", "No Cloud"),
                     values = c("Cloud" = "lightblue",
                                "No Cloud" = "magenta"))

sd_plot + ndai_plot + corr_plot 
```

```{r}

p1 = eda_sample %>%
  filter(label != 0) %>%
  ggplot() +
  geom_point(aes(x = NDAI, y = CORR, col = as.factor(label))) + 
  theme(legend.position = "none")
  
p2 = eda_sample %>%
  filter(label != 0) %>%
  ggplot() +
  geom_point(aes(x = NDAI, y = SD, col = as.factor(label))) + 
  theme(legend.position = "none")

p3 = eda_sample %>%
  filter(label != 0) %>%
  ggplot() +
  geom_point(aes(x = SD, y = CORR, col = as.factor(label))) + 
  theme(legend.position = "bottom") + 
  labs(color = "Expert Label")
  

# combining plots with patchwork
p1 / p2 / p3 
```

#### analysis on the silly little angles

Notes on angular features: (re plot below) green is non-cloud, pink is cloud\] DF: very much overlap, -1 has most density in a smaller range than with 1 CF: upper values for -1, but vals still overlap BF: upper values for -1, but vals still overlap (maybe more extreme than with CF) AF: upper values for -1, but vals still overlap. -1 has a much much narrower range than 1 AN: upper values for -1, but vals still overlap. -1 has a much much narrower range than 1

```{r}
eda_sample %>%
  filter(label == 1) %>%
  #replace x = with feature of choosing
  ggplot(aes(x = BF, y = ..density..)) +
  geom_histogram(fill = 2, alpha = 0.5) + 
  geom_histogram(data = eda_sample %>% filter(label == -1), 
                 fill = 3, alpha = 0.5)
```

Boxplots:

```{r}

b1  = ggplot(eda_sample %>% filter(label != 0), aes(x=as.factor(label),y=AN, fill=label)) + 
  geom_boxplot(alpha=.7) + 
  theme(legend.position = "none") + 
  labs(title = "Labels vs. AN", 
       x = "-1: No Cloud | 1 : Cloud",
       y = TeX("$45^{\\circ}$ front angle, MISR"))

# maybe? 
b2 = ggplot(eda_sample %>% filter(label != 0), aes(x=as.factor(label),y=log(SD + 0.001), fill=label)) + 
  geom_boxplot(alpha=.7) + 
  theme(legend.position = "none") + 
  labs(title = "Labels vs. log(SD)", 
       x = "-1: No Cloud | 1 : Cloud",
       y = TeX("$45^{\\circ}$ front angle, MISR"))

# NDAI
# good predictor for -1 
b3 = ggplot(eda_sample %>% filter(label != 0), aes(x=as.factor(label),y=NDAI, fill=label)) + 
  geom_boxplot(alpha=.7) + 
  theme(legend.position = "none") + 
  labs(title = "Labels vs. NDAI", 
       x = "-1: No Cloud | 1 : Cloud",
       y = TeX("$45^{\\circ}$ front angle, MISR"))

# CORR 
# good predictor for 1 
b4 = ggplot(eda_sample %>% filter(label != 0), aes(x=as.factor(label),y=CORR, fill=label)) + 
  geom_boxplot(alpha=.7) + 
  theme(legend.position = "none") + 
  labs(title = "Labels vs. CORR", 
       x = "-1: No Cloud | 1 : Cloud",
       y = TeX("$45^{\\circ}$ front angle, MISR"))


(b1 + b2) / (b3 + b4) 
```

# 2) preparation

## a) data split

### 1)

The first, and most naive approach, would be to simply treat the three images as training, validation, and test data sets respectively. We know the data is not i.i.d, so it would be inappropriate to randomly sample points for our different sets.

### 2)

Second, since the data is correlated, we can hand-pick slices from each of the three images that result in the desired split, but in a way that retains the ordering. If we split each image into three chunks, we can then choose the first, middle, and last chunk for each of the desired sets and combine them. If, for some reason, there is some kind of feature or interesting detail present in the "position" of a slice of the data, hopefully this will allow us to capture it without overstating accuracy in training. To do this, we calculated the indices by hand.

### 3)

third: create a grid, not across images but training/validation/test in each of the splits and do that three times for each image? (lecture 13 / oct18). ex/ with 9 blocks, use 7 for training, one for validation , one for prediction, usual CV error. since we want to preserve spacial dependency.

blocked Cross validation, repeat process for the three images? what do we do w the 0 points? just remove?

Naive Approach

```{r}
# naive way 
naive_train = img1
naive_test = img2
naive_validate = img3

# hand splitting 
alt_train = data.frame(rbind(img1[23023:92089,],
                             img2[46093:115229,],
                             img3[1:69130,]))

alt_test = data.frame(rbind(img1[1:23022,],
                             img2[23047:46092,],
                             img3[92175:115217,]))

alt_validate = data.frame(rbind(img1[92090:115110,],
                             img2[1:23046,],
                             img3[69131:92174,]))
```

## b) baseline

The trivial classifier would have high accuracy if the image was mostly cloud-free. Since we're a little below 50%, the trivial classifier does not work well. Though, if we switched to classifying everything as a cloud we would have greater than 50% accuracy. However, we have a fairly high degree of uncertainty in our test and validation data. In the test data, about 27% of the points are labeled 0 for uncertain, and in the validation data, 70% are uncertain. So while the trivial classifier does poorly, we have to consider the uncertainty associated with it.

```{r}
trivial = rep(-1,length(alt_test$label))
alt_triv_accuracy = sum(trivial == alt_test$label) / length(alt_test$label)
alt_validate_accuracy = sum(trivial == alt_validate$label) / length(alt_test$label)

alt_triv_accuracy
alt_validate_accuracy

# counts 
alt_test |> count(label)
alt_validate |> count(label)
```

## c) best features

-   want our data to be separated
-   like lec16 on oct27 for classification error metrics?
-   pairwise scatterplots for correlation?
-   variable wise ... tree? like getting cut/off values of an X var to pred Y? i dont think that's too fancy

-in model pred, keep pt order

## d) CV function - separate R file

```{r}
# a different loss example 
log_loss = function(y,y.pred) { 
  
  # y is label in train data 
  # y.pred = [0,1] probability 
  
  L = sum(-y * log(y.pred) - (1-y) * log(1-y.pred))
  return(L)
}


# classification loss function 
classification_error = function(y,y.pred){
  L = 1 - mean(y==y.pred)
  return(L)
}
```

```{r}
# function to merge and output basic stats 

custom_merge = function(df1,df2) {
  
  # combine data frames and calculate difference
  total = merge(df1,df2, by="k")
  colnames(total) = c("k","Val Method 1", "Val Method 2")
  total = total |> mutate(percent_diff = (total[,3] - total[,2])/total[,2] * 100)
  print(as_tibble(total))
  
  # maybe plot here 
  a = summary(total)
  return(a)
}
```

```{r}


CVmaster = function(classifier, train_feat, train_labels, folds=5, loss,
                    fit_type="response") {

  # input: 
    # classifier : generic fit object 
    # train_feat : data frame object 
    # train : data frame object with y labels, has column named "label"
    # folds : number of k folds for cross validation 
    # loss : generic loss function: 
      # currently supports classification loss 
    # fit_type : type of fit
  
  # returns: 
    # output : data frame with columns c("k","loss"), i.e. loss at each 
      # fold k and not averaged over the k folds. To complete k-fold 
      # cross validation, take mean of output$loss 
  
  train_labels = train_labels$label
  
  # data frame to output 
  output = data.frame(k = NA, loss = NA)
  
  # creating k folds 
  val = createFolds(train_labels, k = folds)
  
  for (i in 1:folds){
    
    # predict on validation set 
    predictions = predict(classifier,
                          train_feat[val[[i]],],
                          type=fit_type)
    
    # from probability calc label 
    # need pred_labels to be -1 or 1 
    # improve for l1 logistic 
    if (fit_type == 'response'){
      pred_labels = rep(-1, length(predictions))
      pred_labels[predictions > 0.5] = 1
    } else if (fit_type == 'class') {
      pred_labels = predictions$class
    } else {
      print("fit not supported")
    }
    
    # calculate an arbitrary loss function 
    L = loss(train_labels[val[[i]]], pred_labels)
    
    # then rbind 
    output = rbind(output, c(i,L))
    
  }
  
  # remove null row 
  return(output[-1,])
}
```

# 3) modeling

note:

be careful with Hyperparameter choices

• dimension in PCA

• K in K-means, or GMM

• regularization parameter in regularlized methods

• number of trees in random forests

## a) fitting

Here, merging training and validation data:

```{r}

# method 1 
total = rbind(naive_train, naive_validate)

# all features from train and validate 
# for first validation method 
merge_m1_all = total |> 
  filter(label != 0) |> 
  mutate(label = as.factor(label))

# selected features 
merge_m1 = merge_m1_all |> 
  dplyr::select(label, NDAI, SD, CORR) 

# splitting into features and labels 
# possibly remove this 
merge_m1_feat = merge_m1 |> dplyr::select(NDAI,SD,CORR)
merge_m1_lab = merge_m1 |> dplyr::select(label)

# method 2 
total.alt = rbind(alt_train, alt_validate)

# all features from train and validate sets 
# from second method 
merge_m2_all = total.alt

# all features again but no zeros 
merge_m2_all = merge_m2_all |> 
  filter(label != 0) |> 
  mutate(label = as.factor(label))

# selected features 
merge_m2 = merge_m2_all |> 
  dplyr::select(label, NDAI, SD, CORR) 

# splitting features and labels 
# may not need later
merge_m2_feat = merge_m2 |> dplyr::select(NDAI,SD,CORR)
merge_m2_lab = merge_m2 |> dplyr::select(label)
```

Logistic Regression

```{r cache=TRUE}

# Standard Logistic Regression 

#NAIVE
fit1 = glm(label ~ .,
           data = merge_m1, 
           family='binomial')

#ALTERNATE
fit2 = glm(label ~ .,
           data = merge_m2, 
           family='binomial')

# CV  
# fit with first split method 
# must input data frame for glm 
cv.log1 = CVmaster(classifier = fit1,
                   train_feat = data.frame(merge_m1_feat), 
                   train_labels = merge_m1_lab,
                   folds= 10,
                   loss = classification_error)

# fit with second split method 
cv.log2 = CVmaster(classifier = fit2,
                   train_feat = data.frame(merge_m2_feat), 
                   train_labels = merge_m2_lab,
                   folds= 10,
                   loss = classification_error)

custom_merge(cv.log1,cv.log2)
```

### TEST LOG REGRESSION

```{r}

```

Logistic Regression w L1 penalty

Variable selection

```{r cache=TRUE}

# Logistic Regression with L1 Penalty 


set.seed(123) 
cv.lasso <- cv.glmnet(x, y, alpha = 1, family = "binomial")
# Fit the final model on the training data
model <- glmnet(x, y, alpha = 1, family = "binomial",
                lambda = cv.lasso$lambda.min)

#NAIVE
# cross validate to chooose best lambda 
cv1.l1 = cv.glmnet(as.matrix(merge_m1_all[,c(-1,-2,-3,-12)]), #removing label
                   merge_m1_all[,3], # just label for x, y glmnet args
                   family = "binomial", 
                   alpha = 1)

log.l1.fit1 = glmnet(as.matrix(merge_m1_all[,c(-1,-2,-3,-12)]), #removing label
                   merge_m1_all[,3], # just label for x, y glmnet args
                   family = "binomial", 
                   alpha = 1,
                   lambda = cv1.l1$lambda.min)

#BLOCK
# cross validate to chooose best lambda 
cv2.l1 = cv.glmnet(as.matrix(merge_m2_all[,c(-1,-2,-3,-12)]), #removing label
                   merge_m2_all[,3], # just label for x, y glmnet args
                   family = "binomial", 
                   alpha = 1)

log.l1.fit2 = glmnet(as.matrix(merge_m2_all[,c(-1,-2,-3,-12)]), #removing label
                   merge_m2_all[,3], # just label for x, y glmnet args
                   family = "binomial", 
                   alpha = 1, 
                   lambda = cv2.l1$lambda.min)

# CV  
# fit with first split method 
cv1.log.l1 = CVmaster(classifier = log.l1.fit1,
                   train_feat = as.matrix(merge_m1_all[,c(-1,-2,-3,-12)]),
                   train_labels = merge_m1_lab,
                   folds= 10,
                   loss = classification_error)

cv2.log.l1 = CVmaster(classifier = log.l1.fit2,
                   train_feat = as.matrix(merge_m2_all[,c(-1,-2,-3,-12)]),
                   train_labels = merge_m1_lab,
                   folds= 10,
                   loss = classification_error)

custom_merge(cv1.log.l1, cv2.log.l1)
```

#### TEST LOGISTIC WITH L1 PENALTY

```{r}

```

QDA / LDA

```{r}

#NAIVE WAY
qda.fit1 = qda(label ~ ., data = merge_m1)

# CV 
cv.qda1 = CVmaster(classifier = qda.fit1,
                   train_feat = data.frame(merge_m1_feat), 
                   train_labels = merge_m1_lab,
                   folds= 10,
                   loss = classification_error,
                   fit_type='class')


#BLOCK VALIDATION
qda.fit2 = qda(label ~ ., data = merge_m2)

# CV 
cv.qda2 = CVmaster(classifier = qda.fit2,
                   train_feat = data.frame(merge_m2_feat), 
                   train_labels = merge_m2_lab,
                   folds= 10,
                   loss = classification_error,
                   fit_type='class')

custom_merge(cv.qda1, cv.qda2)
```

### TEST QDA

```{r}

test_prob = predict(qda.fit, naive_test, type = "response")
test_roc = roc(naive_test$label ~ test_prob, plot = TRUE, print.auc = TRUE)


test_prob = predict(qda.fit, alt_test, type = "response")
test_roc = roc(alt_test$label ~ test_prob, plot = TRUE, print.auc = TRUE)
```

BOOSTING

```{r}
#NAIVE
cloudtree = tree(label ~ ., merge_m1)
plot(cloudtree)
text(cloudtree, pretty = 0)
#cloudtree.pred <- predict(cloudtree, naive_test, type = "class")

#ALTERNATE
cloudtree = tree(label ~ ., merge_m2)
plot(cloudtree)
text(cloudtree, pretty = 0)
#cloudtree.pred <- predict(cloudtree, alt_test, type = "class")
```

xgboost

```{r}

```

## b) ROC curves

```{r}
#see if code in part a runs if so it's there
```

## c) (bonus) other metrics

# 4) Diagnostics

Resources

#pg 170 ISL

\# source : http://www.sthda.com/english/articles/36-classification-methods-essentials/149-penalized-logistic-regression-essentials-in-r-ridge-lasso-and-elastic-net/
