```{r echo=FALSE}
library(factoextra)
library(tidyverse)
library(GGally)
library(caret)
library(lctools)
```

# 1)

## a) on overleaf

half page summary of paper

## b) summary of data

Summarize the data, i.e., % of pixels for the different classes. Plot well-labeled beautiful maps using x, y coordinates the expert labels with color of the region based on the expert labels. Do you observe some trend/pattern? Is an i.i.d. assumption for the samples justified for this dataset?

```{r cache=TRUE}
# loading data 
img1 = data.frame(read.table("image_data/imagem1.txt"))
img2 = data.frame(read.table("image_data/imagem2.txt"))
img3 = data.frame(read.table("image_data/imagem3.txt"))

# name the columns  
col_names = c("y", "x", "label", "NDAI", "CD", "CORR", "DF","CF","BF","AF","AN")
colnames(img1) = col_names
colnames(img2) = col_names
colnames(img3) = col_names

# add source column to split into other sets 
img1$source = "img1"
img2$source = "img2"
img3$source = "img3"

# manipulation to make plotting easier 
lab_combined = rbind(img1[,c("x", "y", "label","source")],
                     img2[,c("x", "y", "label","source")],
                     img3[,c("x", "y", "label","source")])

# change to factors to color when plotting 
lab_combined$label = as.factor(lab_combined$label)

```

Geographic plot

```{r cache=TRUE}
ggplot(lab_combined, aes(x=x,y=y)) + 
  geom_point(aes(colour = label)) + 
  facet_grid(cols = vars(source)) + 
  labs(title = "Images With Expert Labels",
       subtitle = "-1: No Cloud | 0 : Uncertain | 1 : Cloud") + 
  scale_colour_brewer("Expert \nLabel")
```

TODO: turn this into a proportion

```{r}
lab_combined2 = lab_combined %>%
  group_by(source, label) %>%
  count(label) %>%
  ungroup(label) %>%
  mutate(prop = n / sum(n))
```

```{r}
ggplot(lab_combined2, aes(label,fill=label)) + 
  geom_col(aes(y = prop)) + 
  facet_grid(cols = vars(source)) + 
  labs(title = "Images With Expert Labels",
       subtitle = "-1: No Cloud | 0 : Uncertain | 1 : Cloud") + 
  ylab("Proportion of Pixels")
```
```{r}
#for reference
ggplot(lab_combined, aes(label,fill=label)) + 
  geom_bar() + 
  facet_grid(cols = vars(source)) + 
  labs(title = "Images With Expert Labels",
       subtitle = "-1: No Cloud | 0 : Uncertain | 1 : Cloud") + 
  ylab("Count of Pixels")
```

## c) EDA

For some basic EDA, I took a random sample of the total data to allow for quicker plotting. This should retain the structure of the data, but may remove some outliers.

```{r}
img_combined = rbind(img1,img2,img3)
eda_sample = sample_n(img_combined,10000)
```

PCA

```{r}
rand.pca = prcomp(eda_sample[,3:11], center=TRUE, scale = TRUE)
fviz_pca_biplot(rand.pca, geom="point", habillage = eda_sample$label)
```

Plotting some pairs

```{r}

# https://www.blopig.com/blog/2019/06/a-brief-introduction-to-ggpairs/
ggpairs(eda_sample, 
        columns=4:11, # all columns 
        ggplot2::aes(color=as.factor(label),alpha=0.2),
        progress = FALSE,
        lower = list(continuous = wrap("smooth", alpha = 0.3, size=0.3)))
```

# 2

## a)

The first, and most naive approach, would be to simply treat the three images as training, validation, and test data sets respectively. We know the data is not i.i.d, so it would be inappropriate to randomly sample points for our different sets.

Second, since the data is correlated, we can hand-pick slices from each of the three images that result in the desired split, but in a way that retains the ordering. If we split each image into three chunks, we can then choose the first, middle, and last chunk for each of the desired sets and combine them. If, for some reason, there is some kind of feature or interesting detail present in the "position" of a slice of the data, hopefully this will allow us to capture it without overstating accuracy in training. To do this, we calculated the indices by hand.

Naive Approach

```{r}
# naive way 
naive_train = img1
naive_test = img2
naive_validate = img3
```

Hand split

```{r}

alt_train = data.frame(rbind(img1[23023:92089,],
                             img2[46093:115229,],
                             img3[1:69130,]))

alt_test = data.frame(rbind(img1[1:23022,],
                             img2[23047:46092,],
                             img3[92175:115217,]))

alt_validate = data.frame(rbind(img1[92090:115110,],
                             img2[1:23046,],
                             img3[69131:92174,]))
```

## b) 

The trivial classifier would have high accuracy if the image was mostly cloud-free.

```{r}
trivial = rep(-1,length(alt_test$label))
alt_triv_accuracy = sum(trivial == alt_test$label) / length(alt_test$label)
alt_validate_accuracy = sum(trivial == alt_validate$label) / length(alt_test$label)

alt_triv_accuracy
alt_validate_accuracy
```

## c) 

## d) 

```{r}
CVmaster = function(classifier, feat, labels, folds, loss) {
  
}
```
